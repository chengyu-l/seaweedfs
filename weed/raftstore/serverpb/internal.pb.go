// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package serverpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Invalid CmdType = 0
	CmdType_Range   CmdType = 1
	CmdType_Put     CmdType = 2
	CmdType_Delete  CmdType = 3
	CmdType_Txn     CmdType = 4
)

var CmdType_name = map[int32]string{
	0: "Invalid",
	1: "Range",
	2: "Put",
	3: "Delete",
	4: "Txn",
}

var CmdType_value = map[string]int32{
	"Invalid": 0,
	"Range":   1,
	"Put":     2,
	"Delete":  3,
	"Txn":     4,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0}
}

type AdminCmdType int32

const (
	AdminCmdType_InvalidAdmin           AdminCmdType = 0
	AdminCmdType_MemberAdd              AdminCmdType = 1
	AdminCmdType_MemberRemove           AdminCmdType = 2
	AdminCmdType_MemberPromote          AdminCmdType = 4
	AdminCmdType_MoveLeader             AdminCmdType = 5
	AdminCmdType_MemberList             AdminCmdType = 6
	AdminCmdType_MemberRaftAttrUpdate   AdminCmdType = 7
	AdminCmdType_MemberNoRaftAttrUpdate AdminCmdType = 8
)

var AdminCmdType_name = map[int32]string{
	0: "InvalidAdmin",
	1: "MemberAdd",
	2: "MemberRemove",
	4: "MemberPromote",
	5: "MoveLeader",
	6: "MemberList",
	7: "MemberRaftAttrUpdate",
	8: "MemberNoRaftAttrUpdate",
}

var AdminCmdType_value = map[string]int32{
	"InvalidAdmin":           0,
	"MemberAdd":              1,
	"MemberRemove":           2,
	"MemberPromote":          4,
	"MoveLeader":             5,
	"MemberList":             6,
	"MemberRaftAttrUpdate":   7,
	"MemberNoRaftAttrUpdate": 8,
}

func (x AdminCmdType) String() string {
	return proto.EnumName(AdminCmdType_name, int32(x))
}

func (AdminCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{1}
}

// Request represent clients' request
type Request struct {
	CmdType              CmdType             `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=serverpb.CmdType" json:"cmd_type,omitempty"`
	Range                *RangeRequest       `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Put                  *PutRequest         `protobuf:"bytes,3,opt,name=put,proto3" json:"put,omitempty"`
	DeleteRange          *DeleteRangeRequest `protobuf:"bytes,4,opt,name=delete_range,json=deleteRange,proto3" json:"delete_range,omitempty"`
	Txn                  *TxnRequest         `protobuf:"bytes,5,opt,name=txn,proto3" json:"txn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid
}

func (m *Request) GetRange() *RangeRequest {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Request) GetPut() *PutRequest {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *Request) GetDeleteRange() *DeleteRangeRequest {
	if m != nil {
		return m.DeleteRange
	}
	return nil
}

func (m *Request) GetTxn() *TxnRequest {
	if m != nil {
		return m.Txn
	}
	return nil
}

type Response struct {
	CmdType              CmdType              `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=serverpb.CmdType" json:"cmd_type,omitempty"`
	Range                *RangeResponse       `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Put                  *PutResponse         `protobuf:"bytes,3,opt,name=put,proto3" json:"put,omitempty"`
	DeleteRange          *DeleteRangeResponse `protobuf:"bytes,4,opt,name=delete_range,json=deleteRange,proto3" json:"delete_range,omitempty"`
	Txn                  *TxnResponse         `protobuf:"bytes,5,opt,name=txn,proto3" json:"txn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid
}

func (m *Response) GetRange() *RangeResponse {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Response) GetPut() *PutResponse {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *Response) GetDeleteRange() *DeleteRangeResponse {
	if m != nil {
		return m.DeleteRange
	}
	return nil
}

func (m *Response) GetTxn() *TxnResponse {
	if m != nil {
		return m.Txn
	}
	return nil
}

type AdminRequest struct {
	CmdType                AdminCmdType                   `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=serverpb.AdminCmdType" json:"cmd_type,omitempty"`
	MemberAdd              *MemberAddRequest              `protobuf:"bytes,2,opt,name=member_add,json=memberAdd,proto3" json:"member_add,omitempty"`
	MemberRemove           *MemberRemoveRequest           `protobuf:"bytes,3,opt,name=member_remove,json=memberRemove,proto3" json:"member_remove,omitempty"`
	MemberPromote          *MemberPromoteRequest          `protobuf:"bytes,4,opt,name=member_promote,json=memberPromote,proto3" json:"member_promote,omitempty"`
	MoveLeader             *MoveLeaderRequest             `protobuf:"bytes,5,opt,name=move_leader,json=moveLeader,proto3" json:"move_leader,omitempty"`
	MemberRaftAttrUpdate   *MemberRaftAttrUpdateRequest   `protobuf:"bytes,6,opt,name=member_raft_attr_update,json=memberRaftAttrUpdate,proto3" json:"member_raft_attr_update,omitempty"`
	MemberNoRaftAttrUpdate *MemberNoRaftAttrUpdateRequest `protobuf:"bytes,7,opt,name=member_no_raft_attr_update,json=memberNoRaftAttrUpdate,proto3" json:"member_no_raft_attr_update,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                       `json:"-"`
	XXX_unrecognized       []byte                         `json:"-"`
	XXX_sizecache          int32                          `json:"-"`
}

func (m *AdminRequest) Reset()         { *m = AdminRequest{} }
func (m *AdminRequest) String() string { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()    {}
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{2}
}

func (m *AdminRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminRequest.Unmarshal(m, b)
}
func (m *AdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminRequest.Marshal(b, m, deterministic)
}
func (m *AdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRequest.Merge(m, src)
}
func (m *AdminRequest) XXX_Size() int {
	return xxx_messageInfo_AdminRequest.Size(m)
}
func (m *AdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRequest proto.InternalMessageInfo

func (m *AdminRequest) GetCmdType() AdminCmdType {
	if m != nil {
		return m.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (m *AdminRequest) GetMemberAdd() *MemberAddRequest {
	if m != nil {
		return m.MemberAdd
	}
	return nil
}

func (m *AdminRequest) GetMemberRemove() *MemberRemoveRequest {
	if m != nil {
		return m.MemberRemove
	}
	return nil
}

func (m *AdminRequest) GetMemberPromote() *MemberPromoteRequest {
	if m != nil {
		return m.MemberPromote
	}
	return nil
}

func (m *AdminRequest) GetMoveLeader() *MoveLeaderRequest {
	if m != nil {
		return m.MoveLeader
	}
	return nil
}

func (m *AdminRequest) GetMemberRaftAttrUpdate() *MemberRaftAttrUpdateRequest {
	if m != nil {
		return m.MemberRaftAttrUpdate
	}
	return nil
}

func (m *AdminRequest) GetMemberNoRaftAttrUpdate() *MemberNoRaftAttrUpdateRequest {
	if m != nil {
		return m.MemberNoRaftAttrUpdate
	}
	return nil
}

type AdminResponse struct {
	CmdType                AdminCmdType                    `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=serverpb.AdminCmdType" json:"cmd_type,omitempty"`
	MemberAdd              *MemberAddResponse              `protobuf:"bytes,2,opt,name=member_add,json=memberAdd,proto3" json:"member_add,omitempty"`
	MemberRemove           *MemberRemoveResponse           `protobuf:"bytes,3,opt,name=member_remove,json=memberRemove,proto3" json:"member_remove,omitempty"`
	MemberPromote          *MemberPromoteResponse          `protobuf:"bytes,4,opt,name=member_promote,json=memberPromote,proto3" json:"member_promote,omitempty"`
	MoveLeader             *MoveLeaderResponse             `protobuf:"bytes,5,opt,name=move_leader,json=moveLeader,proto3" json:"move_leader,omitempty"`
	MemberRaftAttrUpdate   *MemberRaftAttrUpdateResponse   `protobuf:"bytes,6,opt,name=member_raft_attr_update,json=memberRaftAttrUpdate,proto3" json:"member_raft_attr_update,omitempty"`
	MemberNoRaftAttrUpdate *MemberNoRaftAttrUpdateResponse `protobuf:"bytes,7,opt,name=member_no_raft_attr_update,json=memberNoRaftAttrUpdate,proto3" json:"member_no_raft_attr_update,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                        `json:"-"`
	XXX_unrecognized       []byte                          `json:"-"`
	XXX_sizecache          int32                           `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{3}
}

func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminResponse.Unmarshal(m, b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
}
func (m *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(m, src)
}
func (m *AdminResponse) XXX_Size() int {
	return xxx_messageInfo_AdminResponse.Size(m)
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

func (m *AdminResponse) GetCmdType() AdminCmdType {
	if m != nil {
		return m.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (m *AdminResponse) GetMemberAdd() *MemberAddResponse {
	if m != nil {
		return m.MemberAdd
	}
	return nil
}

func (m *AdminResponse) GetMemberRemove() *MemberRemoveResponse {
	if m != nil {
		return m.MemberRemove
	}
	return nil
}

func (m *AdminResponse) GetMemberPromote() *MemberPromoteResponse {
	if m != nil {
		return m.MemberPromote
	}
	return nil
}

func (m *AdminResponse) GetMoveLeader() *MoveLeaderResponse {
	if m != nil {
		return m.MoveLeader
	}
	return nil
}

func (m *AdminResponse) GetMemberRaftAttrUpdate() *MemberRaftAttrUpdateResponse {
	if m != nil {
		return m.MemberRaftAttrUpdate
	}
	return nil
}

func (m *AdminResponse) GetMemberNoRaftAttrUpdate() *MemberNoRaftAttrUpdateResponse {
	if m != nil {
		return m.MemberNoRaftAttrUpdate
	}
	return nil
}

// An InternalRaftRequest is the union of all requests which can be
// sent via raft.
type InternalRaftRequest struct {
	ID                   uint64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ClientRequest        *Request      `protobuf:"bytes,2,opt,name=client_request,json=clientRequest,proto3" json:"client_request,omitempty"`
	AdminRequest         *AdminRequest `protobuf:"bytes,3,opt,name=admin_request,json=adminRequest,proto3" json:"admin_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InternalRaftRequest) Reset()         { *m = InternalRaftRequest{} }
func (m *InternalRaftRequest) String() string { return proto.CompactTextString(m) }
func (*InternalRaftRequest) ProtoMessage()    {}
func (*InternalRaftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{4}
}

func (m *InternalRaftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalRaftRequest.Unmarshal(m, b)
}
func (m *InternalRaftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalRaftRequest.Marshal(b, m, deterministic)
}
func (m *InternalRaftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRaftRequest.Merge(m, src)
}
func (m *InternalRaftRequest) XXX_Size() int {
	return xxx_messageInfo_InternalRaftRequest.Size(m)
}
func (m *InternalRaftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRaftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRaftRequest proto.InternalMessageInfo

func (m *InternalRaftRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InternalRaftRequest) GetClientRequest() *Request {
	if m != nil {
		return m.ClientRequest
	}
	return nil
}

func (m *InternalRaftRequest) GetAdminRequest() *AdminRequest {
	if m != nil {
		return m.AdminRequest
	}
	return nil
}

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("serverpb.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("serverpb.AdminCmdType", AdminCmdType_name, AdminCmdType_value)
	proto.RegisterType((*Request)(nil), "serverpb.Request")
	proto.RegisterType((*Response)(nil), "serverpb.Response")
	proto.RegisterType((*AdminRequest)(nil), "serverpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "serverpb.AdminResponse")
	proto.RegisterType((*InternalRaftRequest)(nil), "serverpb.InternalRaftRequest")
	proto.RegisterType((*EmptyResponse)(nil), "serverpb.EmptyResponse")
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor_41f4a519b878ee3b) }

var fileDescriptor_41f4a519b878ee3b = []byte{
	// 1083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x72, 0x1b, 0x45,
	0x10, 0xce, 0xca, 0xb2, 0x65, 0xb7, 0x7e, 0xbc, 0x1e, 0xfc, 0x23, 0xd6, 0xb2, 0x13, 0x06, 0x12,
	0xbb, 0x54, 0x89, 0x55, 0x31, 0x17, 0x30, 0x50, 0xc1, 0xb1, 0x43, 0x95, 0x8a, 0x84, 0x32, 0xc2,
	0x70, 0xa0, 0x00, 0xd5, 0x58, 0x3b, 0x16, 0x5b, 0xd1, 0xce, 0x2e, 0xbb, 0x23, 0x21, 0x5f, 0xe1,
	0xc2, 0x8d, 0x03, 0x57, 0x9e, 0x80, 0xd7, 0x49, 0x15, 0xc5, 0x03, 0xf0, 0x0c, 0x5c, 0xb8, 0x50,
	0x3b, 0x3b, 0x23, 0x8d, 0x56, 0x23, 0xc9, 0xe4, 0x26, 0x75, 0xf7, 0x7c, 0xdf, 0x76, 0xef, 0x37,
	0xfd, 0x49, 0x50, 0xf1, 0x18, 0xa7, 0x11, 0x23, 0xbd, 0xa3, 0x30, 0x0a, 0x78, 0x80, 0x56, 0x63,
	0x1a, 0x0d, 0x68, 0x14, 0x5e, 0x39, 0xeb, 0xe9, 0xa7, 0x76, 0x78, 0x95, 0xa6, 0x9c, 0x5a, 0x37,
	0x08, 0xba, 0x3d, 0xda, 0x20, 0xa1, 0xd7, 0x20, 0x8c, 0x05, 0x9c, 0x70, 0x2f, 0x60, 0x71, 0x9a,
	0xc5, 0xff, 0x58, 0x50, 0x68, 0xd1, 0x1f, 0xfa, 0x34, 0xe6, 0xe8, 0x21, 0xac, 0x76, 0x7c, 0xb7,
	0xcd, 0x6f, 0x42, 0x5a, 0xb5, 0xee, 0x59, 0x87, 0x95, 0xe3, 0x8d, 0x23, 0x85, 0x7b, 0x74, 0xe6,
	0xbb, 0x97, 0x37, 0x21, 0x6d, 0x15, 0x3a, 0xe9, 0x07, 0xf4, 0x10, 0x96, 0x23, 0xc2, 0xba, 0xb4,
	0x9a, 0xbb, 0x67, 0x1d, 0x16, 0x8f, 0xb7, 0xc7, 0xa5, 0xad, 0x24, 0x2c, 0x41, 0x5b, 0x69, 0x11,
	0x7a, 0x00, 0x4b, 0x61, 0x9f, 0x57, 0x97, 0x44, 0xed, 0xe6, 0xb8, 0xf6, 0xa2, 0xcf, 0x55, 0x65,
	0x52, 0x80, 0x9e, 0x40, 0xc9, 0xa5, 0x3d, 0xca, 0x69, 0x3b, 0x05, 0xcf, 0x8b, 0x03, 0xb5, 0xf1,
	0x81, 0x73, 0x91, 0x9d, 0xa0, 0x28, 0xba, 0xe3, 0x58, 0x42, 0xc4, 0x87, 0xac, 0xba, 0x9c, 0x25,
	0xba, 0x1c, 0xb2, 0x11, 0x11, 0x1f, 0x32, 0xfc, 0xaf, 0x05, 0xab, 0x2d, 0x1a, 0x87, 0x01, 0x8b,
	0xe9, 0xff, 0xec, 0xfc, 0xd1, 0x64, 0xe7, 0x3b, 0x53, 0x9d, 0xa7, 0xa8, 0xaa, 0xf5, 0x03, 0xbd,
	0xf5, 0xad, 0x4c, 0xeb, 0xb2, 0x54, 0xf4, 0xfe, 0xb1, 0xb1, 0xf7, 0xbd, 0x19, 0xbd, 0xcb, 0x93,
	0x13, 0xcd, 0x1f, 0xe8, 0xcd, 0x6f, 0x65, 0x9a, 0x57, 0x54, 0x49, 0xf7, 0xbf, 0xe4, 0xa1, 0x74,
	0xea, 0xfa, 0x9e, 0x9a, 0x09, 0x7a, 0x3c, 0x35, 0x01, 0xed, 0x85, 0x8a, 0xca, 0xa9, 0x31, 0xbc,
	0x0f, 0xe0, 0x53, 0xff, 0x8a, 0x46, 0x6d, 0xe2, 0xba, 0x72, 0x16, 0xce, 0xf8, 0xd0, 0x0b, 0x91,
	0x3b, 0x75, 0x5d, 0x35, 0xf6, 0x35, 0x5f, 0x45, 0xd0, 0x53, 0x28, 0xcb, 0xa3, 0x11, 0xf5, 0x83,
	0x01, 0x95, 0xc3, 0xd9, 0xcb, 0x9e, 0x6e, 0x89, 0xac, 0x02, 0x28, 0xf9, 0x5a, 0x10, 0x3d, 0x83,
	0x8a, 0xc4, 0x08, 0xa3, 0xc0, 0x0f, 0xb8, 0x9a, 0xd7, 0x7e, 0x16, 0xe4, 0x22, 0x4d, 0x2b, 0x14,
	0xc9, 0x2c, 0xa3, 0xe8, 0x43, 0x28, 0x26, 0x70, 0xed, 0x1e, 0x25, 0x2e, 0x8d, 0xe4, 0xe8, 0x76,
	0x35, 0x8c, 0x60, 0x40, 0x9f, 0x8b, 0x9c, 0x02, 0x00, 0x7f, 0x14, 0x42, 0xdf, 0xc0, 0x8e, 0x6a,
	0x84, 0x5c, 0xf3, 0x36, 0xe1, 0x3c, 0x6a, 0xf7, 0x43, 0x97, 0x70, 0x5a, 0x5d, 0x11, 0x48, 0xf7,
	0xa7, 0x5a, 0x22, 0xd7, 0xfc, 0x94, 0xf3, 0xe8, 0x4b, 0x51, 0xa5, 0x30, 0x37, 0x7d, 0x43, 0x12,
	0x75, 0xc0, 0x91, 0xe8, 0x2c, 0x98, 0x26, 0x28, 0x08, 0x82, 0x83, 0x2c, 0xc1, 0x67, 0x81, 0x99,
	0x62, 0xdb, 0x37, 0xa6, 0xf1, 0xaf, 0x79, 0x28, 0x4b, 0x29, 0xc8, 0xdb, 0xf0, 0x1a, 0x5a, 0x38,
	0x31, 0x68, 0x61, 0xd7, 0xa8, 0x05, 0xa9, 0x42, 0x4d, 0x0c, 0x67, 0x66, 0x31, 0xec, 0xcf, 0x12,
	0x83, 0x44, 0x98, 0x54, 0xc3, 0x27, 0x33, 0xd4, 0x70, 0x77, 0xa6, 0x1a, 0x24, 0x4c, 0x46, 0x0e,
	0x1f, 0x99, 0xe4, 0x50, 0x33, 0xcb, 0x41, 0x22, 0xe8, 0x7a, 0xf8, 0x76, 0x91, 0x1e, 0x1e, 0x2c,
	0xd2, 0x83, 0x04, 0x35, 0x0b, 0xc2, 0xbd, 0x85, 0x20, 0x0e, 0x17, 0x0b, 0x42, 0x72, 0xcc, 0x52,
	0xc4, 0xef, 0x16, 0xbc, 0xd1, 0x94, 0xfe, 0x92, 0xa4, 0xd4, 0x8e, 0xa8, 0x40, 0xae, 0x79, 0x2e,
	0x14, 0x91, 0x6f, 0xe5, 0x9a, 0xe7, 0xe8, 0x3d, 0xa8, 0x74, 0x7a, 0x1e, 0x65, 0xbc, 0x1d, 0xa5,
	0x15, 0xf2, 0xc5, 0x6b, 0xbb, 0x73, 0x74, 0xe9, 0xd2, 0x42, 0x85, 0xf4, 0x01, 0x94, 0x49, 0xa2,
	0xa3, 0xd1, 0xc1, 0xa5, 0xac, 0x87, 0xe8, 0xcb, 0xa9, 0x55, 0x22, 0xda, 0x37, 0xbc, 0x0e, 0xe5,
	0x67, 0x7e, 0xc8, 0x6f, 0x54, 0x1f, 0xf5, 0x27, 0x50, 0x90, 0x82, 0x44, 0x45, 0x28, 0x34, 0xd9,
	0x80, 0xf4, 0x3c, 0xd7, 0xbe, 0x83, 0xd6, 0x60, 0x59, 0xac, 0x45, 0xdb, 0x42, 0x05, 0x58, 0xba,
	0xe8, 0x73, 0x3b, 0x87, 0x00, 0x56, 0xd2, 0x2d, 0x6a, 0x2f, 0x25, 0xc1, 0xcb, 0x21, 0xb3, 0xf3,
	0xf5, 0x3f, 0x2c, 0xb9, 0x0d, 0x15, 0x8c, 0x0d, 0x25, 0x09, 0x23, 0xc2, 0xf6, 0x1d, 0x54, 0x86,
	0xb5, 0x91, 0x88, 0x6d, 0x2b, 0x29, 0xd0, 0x45, 0x69, 0xe7, 0xd0, 0x06, 0x94, 0x27, 0x04, 0x66,
	0xe7, 0x51, 0x05, 0x60, 0x2c, 0x17, 0x7b, 0x59, 0x7c, 0x17, 0x25, 0xcf, 0xbd, 0x98, 0xdb, 0x2b,
	0xa8, 0x0a, 0x9b, 0x26, 0x0d, 0xd8, 0x05, 0xe4, 0xc0, 0xb6, 0xf9, 0xdd, 0xd9, 0xab, 0xc7, 0x7f,
	0xe5, 0x20, 0xf7, 0xe9, 0x57, 0xe8, 0x73, 0xd9, 0x1c, 0x9a, 0x61, 0xbc, 0xce, 0x2c, 0x5b, 0xc2,
	0x3b, 0x3f, 0xbd, 0xfa, 0xfb, 0xb7, 0xdc, 0x06, 0x2e, 0x35, 0x06, 0x8f, 0x1b, 0x2f, 0x07, 0x0d,
	0x61, 0x36, 0x27, 0x56, 0x1d, 0x35, 0xc5, 0x90, 0x90, 0xd1, 0x9d, 0x1d, 0xb3, 0x71, 0xe1, 0x2d,
	0x01, 0xb6, 0x8e, 0x41, 0x82, 0x85, 0x7d, 0x9e, 0x40, 0x79, 0x50, 0xd4, 0xcc, 0x0a, 0xcd, 0xf5,
	0x6f, 0x67, 0xbe, 0xc3, 0xe1, 0x3d, 0x41, 0xb1, 0x83, 0x91, 0xa4, 0x48, 0x0d, 0x4f, 0x7f, 0xea,
	0xcb, 0x21, 0x43, 0x46, 0xab, 0x77, 0xcc, 0x1e, 0x38, 0xf5, 0xd4, 0x7c, 0xc8, 0x4e, 0xac, 0xfa,
	0xf1, 0xab, 0x3c, 0x14, 0xce, 0x7a, 0xfd, 0x98, 0xd3, 0x08, 0x75, 0xb5, 0x17, 0x8e, 0xe6, 0xd8,
	0x9a, 0x33, 0x6f, 0xcd, 0xe1, 0xb7, 0x04, 0xd1, 0x2e, 0xde, 0x4e, 0x88, 0x3a, 0x29, 0x74, 0x23,
	0xbd, 0x76, 0x0d, 0xe2, 0xba, 0xc9, 0xf3, 0xc7, 0x93, 0x52, 0x42, 0xf3, 0x4d, 0xd0, 0x59, 0xb0,
	0x16, 0xf1, 0x3b, 0x82, 0x71, 0x1f, 0xbf, 0x69, 0x60, 0x4c, 0xf7, 0x6b, 0x42, 0xfa, 0xb3, 0xa5,
	0x58, 0xe5, 0x66, 0xb9, 0x9d, 0x4f, 0x39, 0xb7, 0x5c, 0x5f, 0x73, 0x9f, 0x22, 0xdd, 0x56, 0xc9,
	0x53, 0xbc, 0xd4, 0x2f, 0x04, 0x9a, 0x1a, 0x64, 0x12, 0x55, 0xc4, 0x35, 0x73, 0x52, 0xd2, 0x61,
	0x41, 0x57, 0xc3, 0x3b, 0x06, 0xba, 0x9e, 0x17, 0x0b, 0x49, 0xfe, 0x98, 0xb9, 0xa0, 0x68, 0xc1,
	0x0f, 0x05, 0x67, 0x91, 0x75, 0xe0, 0xfb, 0x82, 0xf5, 0x2e, 0x76, 0x0c, 0xac, 0xd2, 0x85, 0x12,
	0x55, 0xfd, 0x99, 0x83, 0xe2, 0x0b, 0x92, 0xfc, 0x60, 0x67, 0x84, 0x75, 0x28, 0x62, 0x00, 0xe7,
	0xf4, 0x3a, 0x22, 0x5d, 0x9f, 0xb2, 0x89, 0xae, 0xc7, 0x51, 0x43, 0xd7, 0x7a, 0xd2, 0xc4, 0xef,
	0x8f, 0x19, 0x1a, 0xee, 0xa8, 0x36, 0x6d, 0x5c, 0x5b, 0x43, 0x68, 0xde, 0x4f, 0x1b, 0x67, 0xae,
	0xd1, 0xe1, 0x23, 0xc1, 0x77, 0x88, 0xdf, 0xce, 0xf2, 0xf1, 0x88, 0xb0, 0xf8, 0x9a, 0x46, 0x8f,
	0x52, 0xd7, 0x8c, 0xbf, 0xf7, 0xc2, 0x84, 0xf8, 0x3b, 0x58, 0xf9, 0x82, 0x13, 0xde, 0x8f, 0x91,
	0xb6, 0x8b, 0xd2, 0x88, 0x22, 0xac, 0x4e, 0x27, 0x4c, 0x37, 0x47, 0x27, 0x8b, 0x45, 0xdd, 0x89,
	0x55, 0x7f, 0x0a, 0x5f, 0x8f, 0xfe, 0xf6, 0x5c, 0xad, 0x88, 0xbf, 0x33, 0xef, 0xfe, 0x17, 0x00,
	0x00, 0xff, 0xff, 0xc7, 0x95, 0x78, 0x9c, 0x19, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KVClient interface {
	// Range gets the keys in the range from the key-value store.
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error)
	// Put puts the given key into the key-value store.
	// A put request increments the revision of the key-value store
	// and generates one event in the event history.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// DeleteRange deletes the given range from the key-value store.
	// A delete request increments the revision of the key-value store
	// and generates a delete event in the event history for every deleted key.
	DeleteRange(ctx context.Context, in *DeleteRangeRequest, opts ...grpc.CallOption) (*DeleteRangeResponse, error)
	// Txn processes multiple requests in a single transaction.
	// A txn request increments the revision of the key-value store
	// and generates events with the same revision for every completed request.
	// It is not allowed to modify the same key several times within one txn.
	Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error)
}

type kVClient struct {
	cc *grpc.ClientConn
}

func NewKVClient(cc *grpc.ClientConn) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) DeleteRange(ctx context.Context, in *DeleteRangeRequest, opts ...grpc.CallOption) (*DeleteRangeResponse, error) {
	out := new(DeleteRangeResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/DeleteRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Txn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVServer is the server API for KV service.
type KVServer interface {
	// Range gets the keys in the range from the key-value store.
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	// Put puts the given key into the key-value store.
	// A put request increments the revision of the key-value store
	// and generates one event in the event history.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// DeleteRange deletes the given range from the key-value store.
	// A delete request increments the revision of the key-value store
	// and generates a delete event in the event history for every deleted key.
	DeleteRange(context.Context, *DeleteRangeRequest) (*DeleteRangeResponse, error)
	// Txn processes multiple requests in a single transaction.
	// A txn request increments the revision of the key-value store
	// and generates events with the same revision for every completed request.
	// It is not allowed to modify the same key several times within one txn.
	Txn(context.Context, *TxnRequest) (*TxnResponse, error)
}

// UnimplementedKVServer can be embedded to have forward compatible implementations.
type UnimplementedKVServer struct {
}

func (*UnimplementedKVServer) Range(ctx context.Context, req *RangeRequest) (*RangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (*UnimplementedKVServer) Put(ctx context.Context, req *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedKVServer) DeleteRange(ctx context.Context, req *DeleteRangeRequest) (*DeleteRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRange not implemented")
}
func (*UnimplementedKVServer) Txn(ctx context.Context, req *TxnRequest) (*TxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txn not implemented")
}

func RegisterKVServer(s *grpc.Server, srv KVServer) {
	s.RegisterService(&_KV_serviceDesc, srv)
}

func _KV_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_DeleteRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).DeleteRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/DeleteRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).DeleteRange(ctx, req.(*DeleteRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Txn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Txn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Txn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Txn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Range",
			Handler:    _KV_Range_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KV_Put_Handler,
		},
		{
			MethodName: "DeleteRange",
			Handler:    _KV_DeleteRange_Handler,
		},
		{
			MethodName: "Txn",
			Handler:    _KV_Txn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(ctx context.Context, in *MemberRaftAttrUpdateRequest, opts ...grpc.CallOption) (*MemberRaftAttrUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Cluster/MemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Cluster/MemberRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberUpdate(ctx context.Context, in *MemberRaftAttrUpdateRequest, opts ...grpc.CallOption) (*MemberRaftAttrUpdateResponse, error) {
	out := new(MemberRaftAttrUpdateResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Cluster/MemberUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Cluster/MemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error) {
	out := new(MemberPromoteResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Cluster/MemberPromote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(context.Context, *MemberRaftAttrUpdateRequest) (*MemberRaftAttrUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) MemberAdd(ctx context.Context, req *MemberAddRequest) (*MemberAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberAdd not implemented")
}
func (*UnimplementedClusterServer) MemberRemove(ctx context.Context, req *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRemove not implemented")
}
func (*UnimplementedClusterServer) MemberUpdate(ctx context.Context, req *MemberRaftAttrUpdateRequest) (*MemberRaftAttrUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberUpdate not implemented")
}
func (*UnimplementedClusterServer) MemberList(ctx context.Context, req *MemberListRequest) (*MemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberList not implemented")
}
func (*UnimplementedClusterServer) MemberPromote(ctx context.Context, req *MemberPromoteRequest) (*MemberPromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPromote not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_MemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Cluster/MemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberAdd(ctx, req.(*MemberAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Cluster/MemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberRemove(ctx, req.(*MemberRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRaftAttrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Cluster/MemberUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberUpdate(ctx, req.(*MemberRaftAttrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Cluster/MemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberList(ctx, req.(*MemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberPromote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberPromote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Cluster/MemberPromote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberPromote(ctx, req.(*MemberPromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberAdd",
			Handler:    _Cluster_MemberAdd_Handler,
		},
		{
			MethodName: "MemberRemove",
			Handler:    _Cluster_MemberRemove_Handler,
		},
		{
			MethodName: "MemberUpdate",
			Handler:    _Cluster_MemberUpdate_Handler,
		},
		{
			MethodName: "MemberList",
			Handler:    _Cluster_MemberList_Handler,
		},
		{
			MethodName: "MemberPromote",
			Handler:    _Cluster_MemberPromote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

// MaintenanceClient is the client API for Maintenance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaintenanceClient interface {
	// Defragment defragments a member's backend database to recover storage space.
	Defragment(ctx context.Context, in *DefragmentRequest, opts ...grpc.CallOption) (*DefragmentResponse, error)
	//// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
	//rpc Snapshot(SnapshotRequest) returns (stream SnapshotResponse) {
	//    option (google.api.http) = {
	//      post: "/maintenance/snapshot"
	//      body: "*"
	//  };
	//}
	// MoveLeader requests current leader node to transfer its leadership to transferee.
	MoveLeader(ctx context.Context, in *MoveLeaderRequest, opts ...grpc.CallOption) (*MoveLeaderResponse, error)
	// Status gets the status of the member.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type maintenanceClient struct {
	cc *grpc.ClientConn
}

func NewMaintenanceClient(cc *grpc.ClientConn) MaintenanceClient {
	return &maintenanceClient{cc}
}

func (c *maintenanceClient) Defragment(ctx context.Context, in *DefragmentRequest, opts ...grpc.CallOption) (*DefragmentResponse, error) {
	out := new(DefragmentResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Maintenance/Defragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) MoveLeader(ctx context.Context, in *MoveLeaderRequest, opts ...grpc.CallOption) (*MoveLeaderResponse, error) {
	out := new(MoveLeaderResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Maintenance/MoveLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Maintenance/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServer is the server API for Maintenance service.
type MaintenanceServer interface {
	// Defragment defragments a member's backend database to recover storage space.
	Defragment(context.Context, *DefragmentRequest) (*DefragmentResponse, error)
	//// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
	//rpc Snapshot(SnapshotRequest) returns (stream SnapshotResponse) {
	//    option (google.api.http) = {
	//      post: "/maintenance/snapshot"
	//      body: "*"
	//  };
	//}
	// MoveLeader requests current leader node to transfer its leadership to transferee.
	MoveLeader(context.Context, *MoveLeaderRequest) (*MoveLeaderResponse, error)
	// Status gets the status of the member.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedMaintenanceServer can be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServer struct {
}

func (*UnimplementedMaintenanceServer) Defragment(ctx context.Context, req *DefragmentRequest) (*DefragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Defragment not implemented")
}
func (*UnimplementedMaintenanceServer) MoveLeader(ctx context.Context, req *MoveLeaderRequest) (*MoveLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveLeader not implemented")
}
func (*UnimplementedMaintenanceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterMaintenanceServer(s *grpc.Server, srv MaintenanceServer) {
	s.RegisterService(&_Maintenance_serviceDesc, srv)
}

func _Maintenance_Defragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).Defragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Maintenance/Defragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).Defragment(ctx, req.(*DefragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_MoveLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).MoveLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Maintenance/MoveLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).MoveLeader(ctx, req.(*MoveLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Maintenance/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Maintenance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Maintenance",
	HandlerType: (*MaintenanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Defragment",
			Handler:    _Maintenance_Defragment_Handler,
		},
		{
			MethodName: "MoveLeader",
			Handler:    _Maintenance_MoveLeader_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Maintenance_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}
